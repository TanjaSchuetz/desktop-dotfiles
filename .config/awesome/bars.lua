---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by stira.
--- DateTime: 13.05.20 11:14
---

-- Standard Definitions
require("definitions")

-- awesome-wm-widgets
local battery_widget   = require("awesome-wm-widgets.battery-widget.battery")
local cpu_widget       = require("awesome-wm-widgets.cpu-widget.cpu-widget")
local ram_widget       = require("awesome-wm-widgets.ram-widget.ram-widget")
local calendar_widget  = require("awesome-wm-widgets.calendar-widget.calendar")
local storage_widget   = require("awesome-wm-widgets.fs-widget.fs-widget")
local volumearc_widget = require("awesome-wm-widgets.volumearc-widget.volumearc")

-- Standard awesome library
local gears            = require("gears")
local awful            = require("awful")
awful.rules            = require("awful.rules")


-- Widget and layout library
local wibox       = require("wibox")

-- Theme handling library
local beautiful   = require("beautiful")

-- Keyboard map indicator and switcher
myKeyboardLayout  = awful.widget.keyboardlayout()

-- {{{ Wibar
-- Create a textclock widget
local bar_opacity = 0.7
local bar_height  = 24

local cw          = calendar_widget({
                                      theme     = 'nord',
                                      placement = 'bottom_right'
                                    })

mytextclock       = wibox.widget.textclock()
mytextclock:connect_signal("button::press",
                           function(_, _, _, button)
                             if button == 1 then
                               cw.toggle()
                             end
                           end)

-- Create a wibox for each screen and add it
local taglist_buttons  = gears.table.join(
  awful.button({}, 1, function(t)
    t:view_only()
  end),
  awful.button({ modkey }, 1, function(t)
    if client.focus then
      client.focus:move_to_tag(t)
    end
  end), awful.button({}, 3, awful.tag.viewtoggle),
  awful.button({ modkey }, 3, function(t)
    if client.focus then
      client.focus:toggle_tag(t)
    end
  end), awful.button({}, 4, function(t)
    awful.tag.viewnext(t.screen)
  end),
  awful.button({}, 5, function(t)
    awful.tag.viewprev(t.screen)
  end))

local tasklist_buttons = gears.table.join(
  awful.button({}, 1, function(c)
    if c == client.focus then
      c.minimized = true
    else
      c:emit_signal("request::activate", "tasklist", { raise = true })
    end
  end), awful.button({}, 3, function()
    awful.menu.client_list({ theme = { width = 250 } })
  end), awful.button({}, 4, function()
    awful.client.focus.byidx(1)
  end),
  awful.button({}, 5, function()
    awful.client.focus.byidx(-1)
  end))

local function set_wallpaper(s)
  -- Wallpaper
  if beautiful.wallpaper then
    local wallpaper = beautiful.wallpaper
    -- If wallpaper is a function, call it with the screen
    if type(wallpaper) == "function" then
      wallpaper = wallpaper(s)
    end
    gears.wallpaper.maximized(wallpaper, s, true)
  end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

--layouts = awful.layout.layouts
--tags = {
--  settings = {
--    { names  = {  tag_Develop, tag_Divers, tag_Teams, tag_Admin, tag_Status },
--      layout = { layouts[2], layouts[1], layouts[1], layouts[4] , layouts[4] }
--    },
--    { names  = { tag_DevConsole, tag_VM, tag_Web, tag_Media },
--      layout = { layouts[3], layouts[2], layouts[2], layouts[5] }
--    }}}

-- {{{ tyrannical tags
require("tags")
-- }}}

local scounter = 0

awful.screen.connect_for_each_screen(function(s)
  scounter = scounter + 1

  -- Wallpaper
  set_wallpaper(s, s.index)

  -- Each screen has its own tag table.
  --tags[s] = awful.tag(tags.settings[s.index].names, s, tags.settings[s.index].layout)

  -- Create a promptbox for each screen
  s.mypromptbox = awful.widget.prompt()

  -- Create an imagebox widget which will contain an icon indicating which layout we're using.
  -- We need one layoutbox per screen.
  s.mylayoutbox = awful.widget.layoutbox(s)
  s.mylayoutbox:buttons(gears.table.join(
    awful.button({}, 1,
                 function()
                   awful.layout.inc(1)
                 end),
    awful.button({}, 3,
                 function()
                   awful.layout.inc(-1)
                 end),
    awful.button({}, 4,
                 function()
                   awful.layout.inc(1)
                 end),
    awful.button({}, 5,
                 function()
                   awful.layout.inc(-1)
                 end)))

  -- Create a taglist widget
  s.mytaglist     = awful.widget.taglist {
    screen          = s,
    filter          = awful.widget.taglist.filter.all,
    style           = {
      shape = gears.shape.powerline
    },
    _layout          = {
      spacing        = 10,
      spacing_widget = {
        color  = '#ff0000',
        shape  = gears.shape.powerline,
        widget = wibox.widget.separator,
      },
      layout         = wibox.layout.fixed.horizontal
    },
    widget_template = {
      {
        {
          {
            {
              {
                id     = 'index_role',
                widget = wibox.widget.textbox,
              },
              margins = 0,
              widget  = wibox.container.margin,
            },
            --bg     = beautiful.bg_focus,
            shape  = gears.shape.circle,
            widget = wibox.container.background,
          },
          {
            {
              id     = 'icon_role',
              widget = wibox.widget.imagebox,
            },
            left   = 1,
            right  = 3,
            widget = wibox.container.margin,
          },
          {
            id     = 'text_role',
            widget = wibox.widget.textbox,
          },
          layout = wibox.layout.fixed.horizontal,
        },
        left   = 18,
        right  = 18,
        widget = wibox.container.margin
      },
      id              = 'background_role',
      widget          = wibox.container.background,

      -- Add support for hover colors and an index label
      create_callback = function(self, c3, index, objects)
        --luacheck: no unused args
        self:get_children_by_id('index_role')[1].markup = '<b> ' .. c3.index .. ' </b>'
        self:connect_signal('mouse::enter', function()

          gdebug.dump(self.selected)

          if not self.has_backup then
            self.backup_bg  = self.bg
            self.backup_fg  = self.fg
            self.has_backup = true
          end

          self.bg = beautiful.bg_urgent
          self.fg = beautiful.fg_urgent
        end)

        self:connect_signal('mouse::leave', function()
          if self.has_backup then
            self.bg         = self.backup_bg
            self.fg         = self.backup_fg
            self.has_backup = false
          end
        end)

        self:connect_signal('button::press', function()
          gdebug.print_warning("button pressed")
          self.backup_bg = beautiful.bg_focus
          self.backup_fg = beautiful.fg_focus
        end)

      end,
      update_callback = function(self, c3, index, objects)
        --luacheck: no unused args
        self:get_children_by_id('index_role')[1].markup = '<b> ' .. c3.index .. ' </b>'
      end,
    },
    buttons         = taglist_buttons
  }

  --s.mytaglist = {
  --  tag_Develop,
  --  tag_Admin
  --}

  -- Create a tasklist widget
  s.mytasklist    = awful.widget.tasklist {
    screen  = s,
    filter  = awful.widget.tasklist.filter.currenttags,
    buttons = tasklist_buttons
  }

  -- Create the wibox
  s.mywiboxtop    = awful.wibar({ position = "top", screen = s, opacity = bar_opacity, height = bar_height })
  s.mywiboxbottom = awful.wibar({ position = "bottom", screen = s, opacity = bar_opacity, height = bar_height })
  --s.mywiboxright = awful.wibar({ position = "right", screen = s, width = 200, opacity = 0.7 })

  -- Add widgets to the wibox (second right)
  s.mywiboxtop:setup {
    layout = wibox.layout.align.horizontal,
    { -- Left widgets
      layout = wibox.layout.fixed.horizontal,
      s.mytaglist,
    },
    { -- Left widgets
      layout = wibox.layout.fixed.horizontal,
    },
    { -- Right widgets
      layout = wibox.layout.fixed.horizontal,
      storage_widget({ mounts = { '/', '/media/BIGDATA', '/media/VM', '/media/WORKSPACE' } }),
      ram_widget(),
      cpu_widget({
                   width        = 120,
                   step_width   = 2,
                   step_spacing = 0,
                   color        = '#434c5e'
                 }),
      mytextclock,
    }
  }

  -- Add widgets to the wibox (main top)
  s.mywiboxbottom:setup {
    layout = wibox.layout.align.horizontal,
    { -- Left widgets
      layout = wibox.layout.fixed.horizontal,
      mylauncher,
      s.mypromptbox
    },
    s.mytasklist, -- Middle widget
    { -- Right widgets
      layout = wibox.layout.fixed.horizontal,
      myKeyboardLayout,
      wibox.widget.systray(),
      volumearc_widget(),
      mytextclock,
      s.mylayoutbox
    }
  }
end)
-- }}}
